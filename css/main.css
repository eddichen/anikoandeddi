/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}template,[hidden]{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:bold}button,input{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.grid{list-style:none;margin:0;padding:0;margin-left:-24px}.grid__item{display:inline-block;padding-left:24px;vertical-align:top;width:100%;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.grid--rev{direction:rtl;text-align:left}.grid--rev>.grid__item{direction:ltr;text-align:left}.grid--full{margin-left:0}.grid--full>.grid__item{padding-left:0}.grid--right{text-align:right}.grid--right>.grid__item{text-align:left}.grid--center{text-align:center}.grid--center>.grid__item{text-align:left}.grid--middle>.grid__item{vertical-align:middle}.grid--bottom>.grid__item{vertical-align:bottom}.grid--narrow{margin-left:-12px}.grid--narrow>.grid__item{padding-left:12px}.grid--wide{margin-left:-48px}.grid--wide>.grid__item{padding-left:48px}.one-whole{width:100%}.one-half,.two-quarters,.three-sixths,.four-eighths,.five-tenths,.six-twelfths{width:50%}.one-third,.two-sixths,.four-twelfths{width:33.333%}.two-thirds,.four-sixths,.eight-twelfths{width:66.666%}.one-quarter,.two-eighths,.three-twelfths{width:25%}.three-quarters,.six-eighths,.nine-twelfths{width:75%}.one-fifth,.two-tenths{width:20%}.two-fifths,.four-tenths{width:40%}.three-fifths,.six-tenths{width:60%}.four-fifths,.eight-tenths{width:80%}.one-sixth,.two-twelfths{width:16.666%}.five-sixths,.ten-twelfths{width:83.333%}.one-eighth{width:12.5%}.three-eighths{width:37.5%}.five-eighths{width:62.5%}.seven-eighths{width:87.5%}.one-tenth{width:10%}.three-tenths{width:30%}.seven-tenths{width:70%}.nine-tenths{width:90%}.one-twelfth{width:8.333%}.five-twelfths{width:41.666%}.seven-twelfths{width:58.333%}.eleven-twelfths{width:91.666%}@media only screen and (max-width: 480px){.palm--one-whole{width:100%}.palm--one-half,.palm--two-quarters,.palm--three-sixths,.palm--four-eighths,.palm--five-tenths,.palm--six-twelfths{width:50%}.palm--one-third,.palm--two-sixths,.palm--four-twelfths{width:33.333%}.palm--two-thirds,.palm--four-sixths,.palm--eight-twelfths{width:66.666%}.palm--one-quarter,.palm--two-eighths,.palm--three-twelfths{width:25%}.palm--three-quarters,.palm--six-eighths,.palm--nine-twelfths{width:75%}.palm--one-fifth,.palm--two-tenths{width:20%}.palm--two-fifths,.palm--four-tenths{width:40%}.palm--three-fifths,.palm--six-tenths{width:60%}.palm--four-fifths,.palm--eight-tenths{width:80%}.palm--one-sixth,.palm--two-twelfths{width:16.666%}.palm--five-sixths,.palm--ten-twelfths{width:83.333%}.palm--one-eighth{width:12.5%}.palm--three-eighths{width:37.5%}.palm--five-eighths{width:62.5%}.palm--seven-eighths{width:87.5%}.palm--one-tenth{width:10%}.palm--three-tenths{width:30%}.palm--seven-tenths{width:70%}.palm--nine-tenths{width:90%}.palm--one-twelfth{width:8.333%}.palm--five-twelfths{width:41.666%}.palm--seven-twelfths{width:58.333%}.palm--eleven-twelfths{width:91.666%}}@media only screen and (min-width: 481px) and (max-width: 1023px){.lap--one-whole{width:100%}.lap--one-half,.lap--two-quarters,.lap--three-sixths,.lap--four-eighths,.lap--five-tenths,.lap--six-twelfths{width:50%}.lap--one-third,.lap--two-sixths,.lap--four-twelfths{width:33.333%}.lap--two-thirds,.lap--four-sixths,.lap--eight-twelfths{width:66.666%}.lap--one-quarter,.lap--two-eighths,.lap--three-twelfths{width:25%}.lap--three-quarters,.lap--six-eighths,.lap--nine-twelfths{width:75%}.lap--one-fifth,.lap--two-tenths{width:20%}.lap--two-fifths,.lap--four-tenths{width:40%}.lap--three-fifths,.lap--six-tenths{width:60%}.lap--four-fifths,.lap--eight-tenths{width:80%}.lap--one-sixth,.lap--two-twelfths{width:16.666%}.lap--five-sixths,.lap--ten-twelfths{width:83.333%}.lap--one-eighth{width:12.5%}.lap--three-eighths{width:37.5%}.lap--five-eighths{width:62.5%}.lap--seven-eighths{width:87.5%}.lap--one-tenth{width:10%}.lap--three-tenths{width:30%}.lap--seven-tenths{width:70%}.lap--nine-tenths{width:90%}.lap--one-twelfth{width:8.333%}.lap--five-twelfths{width:41.666%}.lap--seven-twelfths{width:58.333%}.lap--eleven-twelfths{width:91.666%}}@media only screen and (max-width: 1023px){.portable--one-whole{width:100%}.portable--one-half,.portable--two-quarters,.portable--three-sixths,.portable--four-eighths,.portable--five-tenths,.portable--six-twelfths{width:50%}.portable--one-third,.portable--two-sixths,.portable--four-twelfths{width:33.333%}.portable--two-thirds,.portable--four-sixths,.portable--eight-twelfths{width:66.666%}.portable--one-quarter,.portable--two-eighths,.portable--three-twelfths{width:25%}.portable--three-quarters,.portable--six-eighths,.portable--nine-twelfths{width:75%}.portable--one-fifth,.portable--two-tenths{width:20%}.portable--two-fifths,.portable--four-tenths{width:40%}.portable--three-fifths,.portable--six-tenths{width:60%}.portable--four-fifths,.portable--eight-tenths{width:80%}.portable--one-sixth,.portable--two-twelfths{width:16.666%}.portable--five-sixths,.portable--ten-twelfths{width:83.333%}.portable--one-eighth{width:12.5%}.portable--three-eighths{width:37.5%}.portable--five-eighths{width:62.5%}.portable--seven-eighths{width:87.5%}.portable--one-tenth{width:10%}.portable--three-tenths{width:30%}.portable--seven-tenths{width:70%}.portable--nine-tenths{width:90%}.portable--one-twelfth{width:8.333%}.portable--five-twelfths{width:41.666%}.portable--seven-twelfths{width:58.333%}.portable--eleven-twelfths{width:91.666%}}@media only screen and (min-width: 1024px){.desk--one-whole{width:100%}.desk--one-half,.desk--two-quarters,.desk--three-sixths,.desk--four-eighths,.desk--five-tenths,.desk--six-twelfths{width:50%}.desk--one-third,.desk--two-sixths,.desk--four-twelfths{width:33.333%}.desk--two-thirds,.desk--four-sixths,.desk--eight-twelfths{width:66.666%}.desk--one-quarter,.desk--two-eighths,.desk--three-twelfths{width:25%}.desk--three-quarters,.desk--six-eighths,.desk--nine-twelfths{width:75%}.desk--one-fifth,.desk--two-tenths{width:20%}.desk--two-fifths,.desk--four-tenths{width:40%}.desk--three-fifths,.desk--six-tenths{width:60%}.desk--four-fifths,.desk--eight-tenths{width:80%}.desk--one-sixth,.desk--two-twelfths{width:16.666%}.desk--five-sixths,.desk--ten-twelfths{width:83.333%}.desk--one-eighth{width:12.5%}.desk--three-eighths{width:37.5%}.desk--five-eighths{width:62.5%}.desk--seven-eighths{width:87.5%}.desk--one-tenth{width:10%}.desk--three-tenths{width:30%}.desk--seven-tenths{width:70%}.desk--nine-tenths{width:90%}.desk--one-twelfth{width:8.333%}.desk--five-twelfths{width:41.666%}.desk--seven-twelfths{width:58.333%}.desk--eleven-twelfths{width:91.666%}}.grid__container{margin:0 auto;padding:0 24px;max-width:620px}html{-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{font-family:'Source Sans Pro', sans-serif;line-height:1.7}.nav-container{position:absolute;bottom:0;width:100%;background-color:rgba(0,0,0,0.5)}.nav{display:table;margin:0 auto}.nav__list{display:table-row;list-style-type:none;margin:0;padding:0}.nav__item{display:table-cell}.nav__item a{display:block;color:#fff;text-decoration:none;font-family:'Great Vibes', cursive;font-size:40px;padding:20px 30px;line-height:1}.nav__item a:hover{text-decoration:underline}.section__map{position:relative;z-index:4}.section__map,.map{height:100vh;width:100%}.map{border:0;pointer-events:none}.section{height:100vh}.section__half{height:50vh}.section__content{position:relative;z-index:4;padding:30px 0;background-color:#fff}.section__title{font-family:'Great Vibes', cursive;font-size:72px;font-weight:normal;margin:0}.logo{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%)}.logo-names{fill:#fff;width:750px}.intro{position:relative;z-index:4;background-image:url("../images/budapest.jpg");background-size:cover;background-position:center}.details__text{text-align:center;font-size:24px}.gellert{position:relative;overflow:hidden}.background-fixed{position:absolute;top:0;left:0;width:100%;height:100%;z-index:2}.background-fixed__image{position:fixed;top:0;left:0;right:0;bottom:0;width:100%;height:100%;object-fit:cover;z-index:3}

/*# sourceMappingURL=data:application/json;base64, */
